// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreetWorkoutApp.Data;

namespace StreetWorkoutApp.Data.Migrations
{
    [DbContext(typeof(StreetWorkoutDbContext))]
    [Migration("20210818173522_addRolesSeeding")]
    partial class addRolesSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppUserExercise", b =>
                {
                    b.Property<string>("BookmarkedUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FavouriteExercisesId")
                        .HasColumnType("int");

                    b.HasKey("BookmarkedUsersId", "FavouriteExercisesId");

                    b.HasIndex("FavouriteExercisesId");

                    b.ToTable("AppUserExercise");
                });

            modelBuilder.Entity("AppUserTraining", b =>
                {
                    b.Property<string>("BookmarkedUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FavouriteTrainingsId")
                        .HasColumnType("int");

                    b.HasKey("BookmarkedUsersId", "FavouriteTrainingsId");

                    b.HasIndex("FavouriteTrainingsId");

                    b.ToTable("AppUserTraining");
                });

            modelBuilder.Entity("EquipmentExercise", b =>
                {
                    b.Property<int>("EquipmentNeededId")
                        .HasColumnType("int");

                    b.Property<int>("ExercisesId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentNeededId", "ExercisesId");

                    b.HasIndex("ExercisesId");

                    b.ToTable("EquipmentExercise");

                    b.HasData(
                        new
                        {
                            EquipmentNeededId = 1,
                            ExercisesId = 1
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 2
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 3
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 4
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 6
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 7
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 8
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 9
                        },
                        new
                        {
                            EquipmentNeededId = 3,
                            ExercisesId = 10
                        });
                });

            modelBuilder.Entity("ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("ExercisesForMuscleGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleGroupsId")
                        .HasColumnType("int");

                    b.HasKey("ExercisesForMuscleGroupId", "MuscleGroupsId");

                    b.HasIndex("MuscleGroupsId");

                    b.ToTable("ExerciseMuscleGroup");

                    b.HasData(
                        new
                        {
                            ExercisesForMuscleGroupId = 1,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 1,
                            MuscleGroupsId = 2
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 1,
                            MuscleGroupsId = 9
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 2,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 2,
                            MuscleGroupsId = 7
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 2,
                            MuscleGroupsId = 8
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 3,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 3,
                            MuscleGroupsId = 2
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 3,
                            MuscleGroupsId = 6
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 3,
                            MuscleGroupsId = 7
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 4,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 4,
                            MuscleGroupsId = 3
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 4,
                            MuscleGroupsId = 4
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 4,
                            MuscleGroupsId = 9
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 5,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 5,
                            MuscleGroupsId = 2
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 5,
                            MuscleGroupsId = 4
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 5,
                            MuscleGroupsId = 5
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 6,
                            MuscleGroupsId = 8
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 6,
                            MuscleGroupsId = 9
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 6,
                            MuscleGroupsId = 10
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 7,
                            MuscleGroupsId = 6
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 7,
                            MuscleGroupsId = 7
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 7,
                            MuscleGroupsId = 8
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 7,
                            MuscleGroupsId = 9
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 8,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 8,
                            MuscleGroupsId = 6
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 8,
                            MuscleGroupsId = 8
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 8,
                            MuscleGroupsId = 9
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 9,
                            MuscleGroupsId = 1
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 9,
                            MuscleGroupsId = 7
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 9,
                            MuscleGroupsId = 8
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 9,
                            MuscleGroupsId = 9
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 10,
                            MuscleGroupsId = 8
                        },
                        new
                        {
                            ExercisesForMuscleGroupId = 10,
                            MuscleGroupsId = 9
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f7ff7003-9468-49f5-979a-8138bcf8d480",
                            ConcurrencyStamp = "7200be1e-b63d-4fc0-ab40-9edf913c5e47",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f3b35b36-e0ad-479b-9855-35a6a785173c",
                            ConcurrencyStamp = "cf98932f-798d-46d6-8d86-72b66460949d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "7942e80f-1f4d-4da4-8fb0-66616a9d7966",
                            ConcurrencyStamp = "41d71539-cb66-43f6-a1a7-e7a6c8588119",
                            Name = "Trainer",
                            NormalizedName = "TRAINER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b2b201e9-8c95-4d19-89c3-28184f48b1d5",
                            RoleId = "f7ff7003-9468-49f5-979a-8138bcf8d480"
                        },
                        new
                        {
                            UserId = "b2b201e9-8c95-4d19-89c3-28184f48b1d5",
                            RoleId = "7942e80f-1f4d-4da4-8fb0-66616a9d7966"
                        },
                        new
                        {
                            UserId = "b2b201e9-8c95-4d19-89c3-28184f48b1d5",
                            RoleId = "f3b35b36-e0ad-479b-9855-35a6a785173c"
                        },
                        new
                        {
                            UserId = "5a1b8332-873e-4c5f-af06-2ccdf04616dc",
                            RoleId = "7942e80f-1f4d-4da4-8fb0-66616a9d7966"
                        },
                        new
                        {
                            UserId = "5a1b8332-873e-4c5f-af06-2ccdf04616dc",
                            RoleId = "f3b35b36-e0ad-479b-9855-35a6a785173c"
                        },
                        new
                        {
                            UserId = "f8406549-4a2e-4401-9fb8-d06992ef6afd",
                            RoleId = "f3b35b36-e0ad-479b-9855-35a6a785173c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MuscleGroupTraining", b =>
                {
                    b.Property<int>("MuscleGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingsForMuscleGroupId")
                        .HasColumnType("int");

                    b.HasKey("MuscleGroupsId", "TrainingsForMuscleGroupId");

                    b.HasIndex("TrainingsForMuscleGroupId");

                    b.ToTable("MuscleGroupTraining");

                    b.HasData(
                        new
                        {
                            MuscleGroupsId = 7,
                            TrainingsForMuscleGroupId = 1
                        },
                        new
                        {
                            MuscleGroupsId = 8,
                            TrainingsForMuscleGroupId = 1
                        },
                        new
                        {
                            MuscleGroupsId = 9,
                            TrainingsForMuscleGroupId = 1
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b2b201e9-8c95-4d19-89c3-28184f48b1d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fce071a4-802c-4eab-bbe0-51e6e0d80f38",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXhhxBMFb7Cj4eZoP5xAuZaoBKgZM43Q0Kru/MhsXzVc/YFylJGu7vx8IcMpUarEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fabafbf-97ad-4e6e-ab3a-8ecda9d75ad8",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f8406549-4a2e-4401-9fb8-d06992ef6afd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5fb3f86-56eb-435d-a1c8-8f71210ef533",
                            Email = "test@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVgPr+dChejdAe/rRClWZpji6wYNzwKYQJSRVPLVklJg2oL/vquA4iwicYmsXytCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a1ef75e-be5a-483d-bb3a-e755dfbc11a3",
                            TwoFactorEnabled = false,
                            UserName = "test"
                        },
                        new
                        {
                            Id = "5a1b8332-873e-4c5f-af06-2ccdf04616dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26372303-e8d7-47e1-951d-e6dc72a17177",
                            Email = "trainer@trainer.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER@TRAINER.COM",
                            NormalizedUserName = "TRAINER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMDXvCkV2UwIk5YSWGrrzz+cFK4LnXWZiSR4QpPdliQxhluoKgBXDpYyAcvB92LTBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61a488fb-42ff-4076-bba7-c0f89a252985",
                            TwoFactorEnabled = false,
                            UserName = "trainer"
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://m.media-amazon.com/images/I/81CIL-7+n3L._AC_SX425_.jpg",
                            Name = "Dumbells"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://rukminim1.flixcart.com/image/416/416/k37mg7k0/pilates-ring/9/t/g/wooden-gymnastics-roman-rings-wxws-original-imafh2yxqpahjwjx.jpeg?q=70",
                            Name = "Rings"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://i.pinimg.com/564x/d5/e4/53/d5e45313b036eb890d6e918a3428be8b.jpg",
                            Name = "Pull Up Bar"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://kengurupro.eu/wp-content/uploads/2021/01/P-003-1.jpg",
                            Name = "Parallels"
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ExampleUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseLevel")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = 1,
                            Description = "This exercise is performed on rings. The performer must go on top of the rings and open his arms as wide as possible.",
                            ExerciseLevel = 3,
                            ImageUrl = "https://image.shutterstock.com/image-illustration/gymnast-performing-iron-cross-on-260nw-1586582845.jpg",
                            Name = "Iron cross"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = 1,
                            Description = "A front lever is performed by lowering from an inverted hang until the body is completely horizontal and straight with the front of the body facing upwards",
                            ExerciseLevel = 3,
                            ImageUrl = "https://image.shutterstock.com/image-vector/muscular-man-doing-front-lever-260nw-1687648483.jpg",
                            Name = "Fron lever"
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = 1,
                            Description = "A back lever is performed by lowering from an inverted hang until the body is completely horizontal and straight with the front of the body facing backwards.",
                            ExerciseLevel = 2,
                            ImageUrl = "https://flighttrainingfitness.files.wordpress.com/2018/06/back-lever.png",
                            Name = "Back lever"
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = 1,
                            Description = "A pullup is a challenging upper body exercise where you grip an overhead bar and lift your body until your chin is above that bar.",
                            ExerciseLevel = 1,
                            ImageUrl = "https://i.stack.imgur.com/AY9Xl.png",
                            Name = "Pull up"
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = 1,
                            Description = "Conditioning exercise performed in a prone position by raising and lowering the body with the straightening and bending of the arms while keeping the back straight and supporting the body on the hands and toes.",
                            ExerciseLevel = 1,
                            ImageUrl = "https://physicalculturestudy.com/wp-content/uploads/2018/01/pushup.png",
                            Name = "Push up"
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = 1,
                            Description = "Hanging from a bar by your extended arms, you raise your legs parallel to the ground.",
                            ExerciseLevel = 1,
                            ImageUrl = "https://www.gymguider.com/wp-content/uploads/2017/07/Hanging_Leg_Raise.jpg",
                            Name = "Hanging leg raises 90"
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = 1,
                            Description = "Hanging from a bar lift your toes to the bar and start rotating your legs to each side. One rep is moving your toes once to the left and once to the right.",
                            ExerciseLevel = 1,
                            ImageUrl = "https://www.mensjournal.com/wp-content/uploads/2019/01/hangingwindshieldwipers.jpg?w=700&quality=86&strip=all",
                            Name = "Whipers"
                        },
                        new
                        {
                            Id = 8,
                            CreatorId = 1,
                            Description = "Hanging from a bar lift your toes to the bar and hold for 2 seconds, then slowly lower your legs.",
                            ExerciseLevel = 1,
                            ImageUrl = "https://cdn-xi3mbccdkztvoept8hl.netdna-ssl.com/wp-content/uploads/watermarked/Hanging_Leg_Raises_to_Bar-1.png",
                            Name = "Leg raises to bar"
                        },
                        new
                        {
                            Id = 9,
                            CreatorId = 1,
                            Description = "Hanging from a bar lift your body in the front lever position and then slowly bring it back to hanging position",
                            ExerciseLevel = 2,
                            ImageUrl = "https://i.pinimg.com/736x/dd/f0/da/ddf0daa00c840e4020f6edc31ad29f89.jpg",
                            Name = "Front lever raises"
                        },
                        new
                        {
                            Id = 10,
                            CreatorId = 1,
                            Description = "Hanging from a bar lift your knees up to ypur chest and then bring them back.",
                            ExerciseLevel = 1,
                            ImageUrl = "http://1bodyweighttraining.com/wp-content/uploads/2018/04/hanging-knee-raises.png",
                            Name = "Knee raises"
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Traps"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Upper Back"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lower Back"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Abs"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Forearms"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Quadriceps"
                        },
                        new
                        {
                            Id = 11,
                            Name = "HamStrings"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Calves"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Neck"
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "b2b201e9-8c95-4d19-89c3-28184f48b1d5",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "5a1b8332-873e-4c5f-af06-2ccdf04616dc",
                            UserName = "trainer"
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("BreakBetweenCycles")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("BreakBetweenExercises")
                        .HasColumnType("time");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("CyclesCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GoalExerciseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TrainingLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GoalExerciseId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreakBetweenCycles = new TimeSpan(0, 0, 1, 0, 0),
                            BreakBetweenExercises = new TimeSpan(0, 0, 0, 10, 0),
                            CreatorId = 1,
                            CyclesCount = 5,
                            Description = "This is a trainigng for abs. It's really useable for front lever. The trainings should be performed outside.",
                            IsIndoor = false,
                            Name = "Abs routine",
                            TrainingLevel = 1
                        });
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.TrainingExercise", b =>
                {
                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.HasKey("TrainingId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("TrainingsExercises");

                    b.HasData(
                        new
                        {
                            TrainingId = 1,
                            ExerciseId = 6,
                            Reps = 10
                        },
                        new
                        {
                            TrainingId = 1,
                            ExerciseId = 7,
                            Reps = 10
                        },
                        new
                        {
                            TrainingId = 1,
                            ExerciseId = 8,
                            Reps = 10
                        },
                        new
                        {
                            TrainingId = 1,
                            ExerciseId = 10,
                            Reps = 30
                        });
                });

            modelBuilder.Entity("AppUserExercise", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("FavouriteExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserTraining", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.Training", null)
                        .WithMany()
                        .HasForeignKey("FavouriteTrainingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentExercise", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentNeededId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseMuscleGroup", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesForMuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.MuscleGroup", null)
                        .WithMany()
                        .HasForeignKey("MuscleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuscleGroupTraining", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.MuscleGroup", null)
                        .WithMany()
                        .HasForeignKey("MuscleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.Training", null)
                        .WithMany()
                        .HasForeignKey("TrainingsForMuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Exercise", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.Trainer", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Training", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.Trainer", "Creator")
                        .WithMany("CreatedTrainings")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.Exercise", "GoalExercise")
                        .WithMany("TrainingsForAcheiving")
                        .HasForeignKey("GoalExerciseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("GoalExercise");
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.TrainingExercise", b =>
                {
                    b.HasOne("StreetWorkoutApp.Data.Models.Exercise", "Exercise")
                        .WithMany("TrainingsIncludedIn")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetWorkoutApp.Data.Models.Training", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Exercise", b =>
                {
                    b.Navigation("TrainingsForAcheiving");

                    b.Navigation("TrainingsIncludedIn");
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Trainer", b =>
                {
                    b.Navigation("CreatedTrainings");
                });

            modelBuilder.Entity("StreetWorkoutApp.Data.Models.Training", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
